#!/usr/bin/env bash

# Interactive tmux session switcher using fzf
# Lists all tmux sessions except the current one, shows window count and status,
# allows switching with Enter, refreshing with Ctrl-R, and deleting with Ctrl-D
# Type a non-existing session name to create and switch to it

get_sessions() {
  local current_session=$(tmux display-message -p "#S" 2>/dev/null)
  local inside_tmux="$1"

  tmux list-sessions -F "#{session_name}|#{session_windows}|#{?session_attached,attached,detached}" 2>/dev/null |
    awk -F"|" -v current="$current_session" -v inside="$inside_tmux" "{
      # If inside tmux, skip the current session
      if (inside == \"true\" && \$1 == current) {
        next
      }

      if (inside == \"true\" && \$1 == current) {
        status = \"(current)\"
        icon = \"→\"
      } else if (\$3 == \"attached\") {
        status = \"\"
        icon = \"\"
      } else {
        status = \"\"
        icon = \" \"
      }
      printf \"%s %-20s %s %2s windows\\n\", icon, \$1, status, \$2
    }"
}

# Handle command line arguments
if [[ "$1" == "--get-sessions" ]]; then
  get_sessions "$2"
  exit 0
fi

# Check if we have any sessions at all
session_count=$(tmux list-sessions 2>/dev/null | wc -l)

# Pass whether we're inside tmux to the function
inside_tmux_flag=""
if [[ -n "$TMUX" ]]; then
  inside_tmux_flag="true"
fi

# Prepare the input for fzf
if [[ $session_count -eq 0 ]]; then
  # No sessions, start with empty input
  sessions_input=""
else
  sessions_input=$(get_sessions "$inside_tmux_flag")
fi

result=$(echo "$sessions_input" |
  fzf --reverse \
    --prompt="-> " \
    --header="═══ TMUX ═══ | Enter: switch/create | Ctrl-D: delete | Ctrl-R: refresh" \
    --header-first \
    --border=rounded \
    --color="header:italic" \
    --preview="tmux list-windows -t {1} -F \"  #{window_index}: #{window_name} #{?window_active,(active),}\" 2>/dev/null || echo 'New session: {q}'" \
    --preview-window="right:40%:wrap" \
    --bind="ctrl-r:reload(${BASH_SOURCE[0]} --get-sessions \"$inside_tmux_flag\")" \
    --bind="ctrl-d:execute(tmux kill-session -t {1} 2>/dev/null)+reload(${BASH_SOURCE[0]} --get-sessions \"$inside_tmux_flag\")" \
    --expect="enter" \
    --print-query)

# Parse the result
# When using --expect and --print-query, fzf outputs:
# line 1: query (what was typed)
# line 2: key (if matched from --expect)
# line 3: selection (what was selected)
query=""
key=""
selection=""

if [[ -n "$result" ]]; then
  lines=()
  while IFS= read -r line; do
    lines+=("$line")
  done <<<"$result"

  query="${lines[0]:-}"
  key="${lines[1]:-}"
  selection="${lines[2]:-}"
fi

# Function to switch/attach to a session
switch_or_attach() {
  local session_name="$1"
  if [[ -z "$session_name" ]]; then
    echo "Error: No session name provided" >&2
    return 1
  fi

  if [[ -n "$TMUX" ]]; then
    # Inside tmux, switch client
    tmux switch-client -t "$session_name" 2>&1
  else
    # Outside tmux, attach to session
    tmux attach-session -t "$session_name" 2>&1
  fi
}

if [[ -n "$selection" ]]; then
  # User selected an existing session
  # Format: [icon] [session_name_padded] [status] [window_count] windows
  # Extract the session name by removing icon, trimming, and stopping at status/windows
  session_name=$(echo "$selection" | sed 's/^.//' | sed 's/[[:space:]]*$//' | awk '{print $1}')
  switch_or_attach "$session_name"
elif [[ -n "$query" ]]; then
  # User typed a session name that doesn't exist - create it
  if tmux has-session -t "$query" 2>/dev/null; then
    # Session exists, switch/attach to it
    switch_or_attach "$query"
  else
    # Session doesn't exist, create and switch/attach to it
    if [[ -n "$TMUX" ]]; then
      # Inside tmux, create detached and switch
      tmux new-session -d -s "$query"
      tmux switch-client -t "$query"
    else
      # Outside tmux, create and attach directly
      tmux new-session -s "$query"
    fi
  fi
fi
